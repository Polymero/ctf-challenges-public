#!/usr/bin/env python3
#
# Polymero
#

# Imports
from hashlib import sha256
import os, time

def gen_box(seed):
    box = []
    i = 0
    while len(box) < 16:
        i += 1
        h = sha256(('SBOX :: ' + seed).encode() + i.to_bytes(2, 'big')).hexdigest()
        for j in h:
            b = int(j, 16)
            if b not in box:
                box += [b]
    return box

def test_lin(box):
    b = box[0]
    lin = True
    for x in range(16):
        for y in range(16):
            if box[x] ^ box[y] != box[x ^ y] ^ b:
                lin = False
        if not lin:
            return None
    return b


t0 = time.time()
print('|\n|  ~ Starting search...\n|')

k = 0
while True:
    k += 1

    if not (k & 0xfff):
        t1 = time.time()
        ps = k / (t1 - t0)
        ts = int((65e6 - k) / ps)
        print('|  ~ {} ({:.1f}K /s) (approx. {}m {}s left)    '.format(k, int(ps) / 1000, ts // 60, ts % 60), end='\r', flush=True)

    seed = os.urandom(8).hex()
    sbox = gen_box(seed)

    if test_lin(sbox):
        break


td = int(time.time() - t0)
print('|  ~ Found a fully linear sbox ::                 ')
print('|    seed  = {}'.format(seed))
print('|    sbox  = {}'.format(sbox))
print('|    time  = {}m {}s'.format(td // 60, td % 60))
print('|    tries = {}'.format(k))
print('|')